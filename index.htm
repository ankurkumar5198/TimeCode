<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TimeCode - Calculate Time Complexity</title>
    <link rel="stylesheet" href="style.css">
    <style>
        /* Inline media queries for better responsiveness */
        @media (max-width: 768px) {
            textarea {
                width: 90%;
                height: 250px;
            }

            button {
                padding: 12px 25px;
                font-size: 16px;
            }
        }

        @media (max-width: 480px) {
            h1 {
                font-size: 36px;
            }

            p {
                font-size: 16px;
            }

            textarea {
                width: 90%;
                height: 200px;
            }

            button {
                padding: 10px 20px;
                font-size: 14px;
            }
        }
    </style>
</head>

<body>

    <!-- Title Section -->
    <h1>TimeCode</h1>

    <!-- Description Section -->
    <p>Easily calculate the time complexity of your pseudocode snippets!</p>

    <!-- Code Input Section -->
    <textarea id="codeInput" placeholder="Paste your pseudocode here..."></textarea>

    <!-- Calculate Button -->
    <br>
    <button onclick="calculateComplexity()">Calculate Time Complexity</button>

    <!-- Result Section (optional, can be shown after calculation) -->
    <div class="result-section" id="resultSection" style="display: none;">
        <p><strong>Estimated Time Complexity:</strong> <span id="timeComplexity"></span></p>
    </div>

    <!-- JavaScript Section -->
    <script>
        function calculateComplexity() {
            const pseudocode = document.getElementById('codeInput').value;
            let complexity = 'O(1)'; // Default base complexity

            // Regular expressions to match common patterns (loops and recursion)
            const forLoopPattern = /for\s*\((?:let|var|const)\s*\w+\s*=\s*\d+;\s*\w+\s*<\s*(\w+);\s*\w+\+\+\)/g;
            const recursionPattern = /(\w+)\s*\(\s*(\w+)\s*\/\s*\d+\s*\)/g;

            // Loop detection (only handles simple "for" loops)
            const loopMatches = pseudocode.match(forLoopPattern);
            if (loopMatches) {
                let loopDepth = loopMatches.length; // Count how many loops are nested
                if (loopDepth === 1) {
                    complexity = 'O(n)'; // Single loop
                } else if (loopDepth === 2) {
                    complexity = 'O(n^2)'; // Nested loops (n^2)
                } else if (loopDepth > 2) {
                    complexity = `O(n^${loopDepth})`; // Nested loops beyond two
                }
            }

            // Recursion detection (simplified handling of recursive calls)
            const recursionMatch = pseudocode.match(recursionPattern);
            if (recursionMatch) {
                const recursiveFactor = recursionMatch[0].split('/')[1].trim();
                if (recursiveFactor === '2') {
                    complexity = `O(log n) * ${complexity}`; // Simple divide-by-2 recursion
                } else {
                    complexity = `O(unknown recursion factor) + ${complexity}`; // General case for recursion
                }
            }

            // Display the result
            document.getElementById('timeComplexity').innerText = complexity;
            document.getElementById('resultSection').style.display = 'block';
        }
    </script>

</body>

</html>
